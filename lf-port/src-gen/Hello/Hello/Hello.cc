/*
 * This file was autogenerated by the Lingua Franca Compiler.
 *
 * Source: file:/home/zekailin00/Desktop/PhysX/physx/snippets/snippethelloworld/lf-port/Hello.lf
 */

#include "Hello/Hello.hh"

using namespace reactor::operators;

  // private preamble

// outer constructor
Hello::Hello(const std::string& name, reactor::Environment* __lf_environment, Parameters&& __lf_parameters)
  : reactor::Reactor(name, __lf_environment)
  , __lf_inner(this, std::forward<Parameters>(__lf_parameters))
  //reactor instances
  , physx(std::make_unique<PhysxDriver>("physx", this, PhysxDriver::Parameters{}))
  , controller(std::make_unique<KeyBoard>("controller", this, KeyBoard::Parameters{}))
  // timers
  // actions
  
  // reaction views
  
{
            
            
  // reaction views
  
}
Hello::Hello(const std::string& name, reactor::Reactor* __lf_container, Parameters&& __lf_parameters)
  : reactor::Reactor(name, __lf_container)
  , __lf_inner(this, std::forward<Parameters>(__lf_parameters))
  //reactor instances
  , physx(std::make_unique<PhysxDriver>("physx", this, PhysxDriver::Parameters{}))
  , controller(std::make_unique<KeyBoard>("controller", this, KeyBoard::Parameters{}))
  // timers
  // actions
  
  // reaction views
  
{
            
            
  // reaction views
  
}

// inner constructor
Hello::Inner::Inner(::reactor::Reactor* reactor, Parameters&& parameters)
  : LFScope(reactor)
  , __lf_parameters(std::forward<Parameters>(parameters))
  // state variables
{}

void Hello::assemble() {
        
  // connections
  this->environment()->draw_connection(&controller->fire, &physx->fire, reactor::ConnectionProperties{reactor::ConnectionType::Normal, reactor::Duration::zero(), nullptr});
  this->environment()->draw_connection(&controller->quit, &physx->quit, reactor::ConnectionProperties{reactor::ConnectionType::Normal, reactor::Duration::zero(), nullptr});
  this->environment()->draw_connection(&controller->add_cube, &physx->new_stack, reactor::ConnectionProperties{reactor::ConnectionType::Normal, reactor::Duration::zero(), nullptr});
}

// methods


        
        
