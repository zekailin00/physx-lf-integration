/*
 * This file was autogenerated by the Lingua Franca Compiler.
 *
 * Source: file:/home/zekailin00/Desktop/PhysX/physx/snippets/snippethelloworld/lf-port/Hello.lf
 */
 
#pragma once

#include "reactor-cpp/reactor-cpp.hh"
#include "lfutil.hh"

using namespace std::chrono_literals;

#include "Hello/_lf_preamble.hh"

        

// public preamble


class KeyBoard: public reactor::Reactor {
public:
  struct Parameters {
        
  };

 private:
        

  class Inner: public lfutil::LFScope {
    const Parameters __lf_parameters;
        
    // state variable
    std::thread thread;
    std::atomic<bool> terminate;
    // methods
    
    // reaction bodies
    void reaction_1(
      [[maybe_unused]] const reactor::PhysicalAction<char>& keyboard_input,
      reactor::Output<void>& fire,
      reactor::Output<void>& quit,
      reactor::Output<void>& add_cube); 
    void reaction_2([[maybe_unused]] const reactor::ShutdownTrigger& shutdown);
    // deadline handlers
    

    Inner(reactor::Reactor* reactor, Parameters&& parameters);

   friend KeyBoard;
  };

  Inner __lf_inner;

        
  // reactor instances
  // timers
  
  // actions
  reactor::PhysicalAction<char> keyboard_input;
  // default actions
  reactor::StartupTrigger startup {"startup", this};
  reactor::ShutdownTrigger shutdown {"shutdown", this};
  // reaction views
  
  
  // reactions
  void reaction_1_body() { __lf_inner.reaction_1(keyboard_input, fire, quit, add_cube); }
  reactor::Reaction reaction_1{"reaction_1", 1, this, [this]() { reaction_1_body(); }};
  void reaction_2_body() { __lf_inner.reaction_2(shutdown); }
  reactor::Reaction reaction_2{"reaction_2", 2, this, [this]() { reaction_2_body(); }};

 public:
  // input ports
  
  // output ports
  reactor::Output<void> fire{"fire", this};
  reactor::Output<void> quit{"quit", this};
  reactor::Output<void> add_cube{"add_cube", this};
  KeyBoard(const std::string& name, reactor::Environment* __lf_environment, Parameters&& __lf_parameters);
  KeyBoard(const std::string& name, reactor::Reactor* __lf_container, Parameters&& __lf_parameters);

  void assemble() override;
};

        
